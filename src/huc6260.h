/*
 * Geargrafx - PC Engine / TurboGrafx Emulator
 * Copyright (C) 2024  Ignacio Sanchez

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
 *
 */

#ifndef HUC6260_H
#define HUC6260_H

#include <iostream>
#include <fstream>
#include "common.h"

#define HUC6260_LINE_LENGTH 1365
#define HUC6260_LINES 263
#define HUC6260_HSYNC_LENGTH 237
#define HUC6260_HSYNC_START_HPOS (HUC6260_LINE_LENGTH - HUC6260_HSYNC_LENGTH)
#define HUC6260_HSYNC_END_HPOS 0
#define HUC6260_VSYNC_HPOS (HUC6260_HSYNC_START_HPOS + 30)

class HuC6202;
class HuC6280;

class HuC6260
{
public:
    struct HuC6260_State
    {
        u8* CR;
        u16* CTA;
        s32* HPOS;
        s32* VPOS;
        bool* HSYNC;
        bool* VSYNC;
    };

    enum HuC6260_Speed
    {
        HuC6260_SPEED_5_36_MHZ,
        HuC6260_SPEED_7_16_MHZ,
        HuC6260_SPEED_10_8_MHZ,
    };

public:
    HuC6260(HuC6202* huc6202, HuC6280* huc6280);
    ~HuC6260();
    void Init(GG_Pixel_Format pixel_format = GG_PIXEL_RGBA8888);
    void Reset(bool is_sgx);
    bool Clock(u32 cycles);
    u8 ReadRegister(u16 address);
    void WriteRegister(u16 address, u8 value);
    HuC6260_State* GetState();
    HuC6260_Speed GetSpeed();
    int GetClockDivider();
    int GetTotalLines();
    u16* GetColorTable();
    void SetBuffer(u8* frame_buffer);
    u8* GetBuffer();
    int GetCurrentWidth();
    int GetCurrentHeight();
    int GetWidthScale();
    void SetScanlineStart(int scanline_start);
    void SetScanlineEnd(int scanline_end);
    void SetOverscan(bool overscan);
    GG_Pixel_Format GetPixelFormat();
    void SetResetValue(int value);
    void SetCompositePalette(bool enable);
    void SaveState(std::ostream& stream);
    void LoadState(std::istream& stream);

private:
    void InitPalettes();
    void AdjustForMultipleDividers();
    void RenderFrame();
    template <bool SGX, int BPP>
    void RenderFrameTemplate();
    void CalculateScreenBounds();

private:
    HuC6202* m_huc6202;
    HuC6280* m_huc6280;
    HuC6260_State m_state;
    bool m_is_sgx;
    u8 m_control_register;
    u16 m_color_table_address;
    s32 m_speed;
    s32 m_clock_divider;
    u16 m_color_table[512] = {};
    u8* m_frame_buffer;
    u8 m_scale_buffer[2048 * 512 * 4] = {};
    u16 m_vce_buffer_1[1024 * 512] = {};
    u16 m_vce_buffer_2[1024 * 512] = {};
    s32 m_line_speed[242] = {};
    bool m_multiple_speeds;
    bool m_scaled_width;
    bool m_active_line;
    s32 m_hpos;
    s32 m_vpos;
    s32 m_pixel_index;
    s32 m_pixel_x;
    bool m_hsync;
    bool m_vsync;
    s32 m_blur;
    u32 m_black_and_white;
    int m_overscan;
    int m_scanline_start;
    int m_scanline_end;
    GG_Pixel_Format m_pixel_format;
    u8 m_rgba888_palette[2][512][4] = {};
    u8 m_rgb565_palette[2][512][2] = {};
    int m_reset_value;
    int m_palette;
    int m_screen_start_x;
    int m_screen_end_x;
    int m_screen_start_y;
    int m_screen_end_y;
};

static const HuC6260::HuC6260_Speed k_huc6260_speed[4] = {
    HuC6260::HuC6260_SPEED_5_36_MHZ, HuC6260::HuC6260_SPEED_7_16_MHZ,
    HuC6260::HuC6260_SPEED_10_8_MHZ, HuC6260::HuC6260_SPEED_10_8_MHZ };

static const int k_huc6260_total_lines[2] = { HUC6260_LINES - 1, HUC6260_LINES };
static const int k_huc6260_full_line_width[4] = { 342, 455, 683, 683 };
static const int k_huc6260_line_width[2][4] = {
    { 256, 341, 512, 512 },
    { 256 + 24, 341 + 32, 512 + 48, 512 + 48 } };
static const int k_huc6260_line_start[2][4] = {
    { 24 + 24, 24 + 48, 24 + 96, 24 + 96 },
    { 24 + 24 - 12, 24 + 48 - 16, 24 + 96 - 24, 24 + 96 - 24 } };
static const int k_huc6260_line_end[2][4] = {
    { 256 + 24 + 24, 341 + 24 + 48, 512 + 24 + 96, 512 + 24 + 96 },
    { 256 + 24 + 24 + 24 - 12, 341 + 32 + 24 + 48 - 16, 512 + 48 + 24 + 96 - 24, 512 + 48 + 24 + 96 - 24 } };
static const int k_huc6260_scaling_width[2] = { 1024, 1120 };

static const uint8_t k_rgb888_palette_composite[512][3] = {
    {   0,   0,   0}, {   0,   0,  27}, {   1,   2,  61}, {   0,   0,  88},
    {   1,   4, 123}, {   0,   0, 149}, {   2,   5, 184}, {   0,   2, 211},
    {  28,   0,   4}, {  32,   4,  39}, {  29,   1,  65}, {  33,   6, 100},
    {  29,   2, 127}, {  34,   7, 162}, {  30,   4, 188}, {  34,   9, 223},
    {  64,   6,  16}, {  60,   3,  43}, {  65,   8,  78}, {  61,   5, 104},
    {  66,  10, 139}, {  62,   6, 166}, {  66,  11, 200}, {  62,   8, 227},
    {  92,   5,  20}, {  88,   2,  47}, {  93,   7,  82}, {  89,   4, 108},
    {  94,   9, 143}, {  90,   5, 170}, {  94,  10, 205}, {  90,   7, 231},
    { 120,   4,  25}, { 125,   9,  59}, { 121,   6,  86}, { 125,  11, 121},
    { 122,   8, 147}, { 126,  13, 182}, { 122,   9, 209}, { 127,  14, 243},
    { 156,  11,  37}, { 153,   8,  63}, { 157,  13,  98}, { 153,  10, 125},
    { 158,  15, 160}, { 154,  12, 186}, { 158,  17, 221}, { 155,  13, 247},
    { 184,  10,  41}, { 181,   7,  68}, { 185,  12, 102}, { 181,   9, 129},
    { 186,  14, 164}, { 182,  10, 190}, { 186,  15, 225}, { 183,  12, 252},
    { 212,   9,  45}, { 217,  14,  80}, { 213,  11, 106}, { 218,  16, 141},
    { 214,  13, 168}, { 218,  18, 203}, { 214,  14, 229}, { 219,  19, 255},
    {   9,  37,   2}, {   5,  34,  29}, {   9,  39,  64}, {   6,  36,  90},
    {  10,  41, 125}, {   6,  37, 152}, {  11,  42, 186}, {   7,  39, 213},
    {  37,  36,   6}, {  33,  33,  33}, {  37,  38,  68}, {  34,  35,  94},
    {  38,  40, 129}, {  34,  36, 156}, {  39,  41, 190}, {  35,  38, 217},
    {  65,  35,  10}, {  69,  40,  45}, {  65,  37,  72}, {  70,  42, 107},
    {  66,  39, 133}, {  70,  44, 168}, {  67,  40, 194}, {  71,  45, 229},
    { 101,  42,  23}, {  97,  39,  49}, { 102,  44,  84}, {  98,  41, 111},
    { 102,  46, 145}, {  98,  43, 172}, { 103,  48, 207}, {  99,  44, 233},
    { 129,  41,  27}, { 125,  38,  53}, { 130,  43,  88}, { 126,  40, 115},
    { 130,  45, 150}, { 126,  42, 176}, { 131,  47, 211}, { 127,  43, 237},
    { 157,  40,  31}, { 161,  45,  66}, { 158,  42,  92}, { 162,  47, 127},
    { 158,  44, 154}, { 163,  49, 188}, { 159,  45, 215}, { 163,  50, 250},
    { 193,  47,  43}, { 189,  44,  70}, { 194,  49, 105}, { 190,  46, 131},
    { 194,  51, 166}, { 191,  48, 192}, { 195,  53, 227}, { 191,  49, 254},
    { 221,  46,  47}, { 217,  43,  74}, { 222,  48, 109}, { 218,  45, 135},
    { 222,  50, 170}, { 219,  47, 197}, { 223,  52, 231}, { 219,  48, 255},
    {   9,  66,   0}, {  14,  71,  31}, {  10,  68,  58}, {  14,  73,  92},
    {  10,  70, 119}, {  15,  75, 154}, {  11,  71, 180}, {  16,  76, 215},
    {  45,  73,   9}, {  42,  70,  35}, {  46,  75,  70}, {  42,  72,  97},
    {  47,  77, 131}, {  43,  74, 158}, {  39,  70, 184}, {  44,  75, 219},
    {  73,  72,  13}, {  70,  69,  39}, {  74,  74,  74}, {  70,  71, 101},
    {  75,  76, 135}, {  71,  73, 162}, {  75,  78, 197}, {  72,  74, 223},
    { 101,  71,  17}, { 106,  76,  52}, { 102,  73,  78}, { 106,  78, 113},
    { 103,  75, 139}, { 107,  80, 174}, { 103,  77, 201}, { 108,  82, 236},
    { 138,  78,  29}, { 134,  75,  56}, { 138,  80,  90}, { 134,  77, 117},
    { 139,  82, 152}, { 135,  79, 178}, { 131,  75, 205}, { 136,  80, 240},
    { 166,  77,  33}, { 162,  74,  60}, { 166,  79,  95}, { 162,  76, 121},
    { 167,  81, 156}, { 163,  78, 182}, { 168,  83, 217}, { 164,  79, 244},
    { 194,  76,  37}, { 198,  81,  72}, { 194,  78,  99}, { 199,  83, 133},
    { 195,  80, 160}, { 199,  85, 195}, { 196,  82, 221}, { 200,  87, 255},
    { 230,  84,  50}, { 226,  80,  76}, { 230,  85, 111}, { 227,  82, 137},
    { 223,  79, 164}, { 227,  84, 199}, { 224,  81, 225}, { 228,  86, 255},
    {  18, 103,   0}, {  14, 100,  25}, {  18, 105,  60}, {  15, 102,  86},
    {  19, 107, 121}, {  15, 104, 148}, {  20, 109, 183}, {  16, 105, 209},
    {  46, 102,   3}, {  50, 107,  37}, {  46, 104,  64}, {  51, 109,  99},
    {  47, 106, 125}, {  52, 111, 160}, {  48, 108, 187}, {  52, 113, 221},
    {  74, 101,   7}, {  78, 106,  42}, {  74, 103,  68}, {  79, 108, 103},
    {  75, 105, 129}, {  80, 110, 164}, {  76, 107, 191}, {  80, 112, 226},
    { 110, 108,  19}, { 106, 105,  46}, { 111, 110,  80}, { 107, 107, 107},
    { 111, 112, 142}, { 108, 109, 168}, { 112, 114, 203}, { 108, 110, 230},
    { 138, 107,  23}, { 142, 112,  58}, { 139, 109,  84}, { 143, 114, 119},
    { 139, 111, 146}, { 144, 116, 181}, { 140, 113, 207}, { 144, 118, 242},
    { 166, 106,  27}, { 170, 111,  62}, { 167, 108,  89}, { 171, 113, 123},
    { 167, 110, 150}, { 172, 115, 185}, { 168, 112, 211}, { 172, 117, 246},
    { 202, 114,  40}, { 198, 110,  66}, { 203, 115, 101}, { 199, 112, 127},
    { 204, 117, 162}, { 200, 114, 189}, { 204, 119, 224}, { 200, 116, 250},
    { 230, 112,  44}, { 235, 117,  78}, { 231, 114, 105}, { 235, 119, 140},
    { 232, 116, 166}, { 236, 121, 201}, { 232, 118, 228}, { 237, 123, 255},
    {  18, 132,   0}, {  23, 137,  27}, {  19, 134,  54}, {  23, 139,  89},
    {  20, 136, 115}, {  24, 141, 150}, {  20, 138, 177}, {  25, 143, 211},
    {  55, 139,   5}, {  51, 136,  31}, {  55, 141,  66}, {  51, 138,  93},
    {  56, 143, 128}, {  52, 140, 154}, {  57, 145, 189}, {  53, 141, 215},
    {  83, 138,   9}, {  87, 143,  44}, {  83, 140,  70}, {  88, 145, 105},
    {  84, 142, 132}, {  88, 147, 166}, {  85, 144, 193}, {  89, 149, 228},
    { 111, 137,  13}, { 115, 142,  48}, { 111, 139,  74}, { 116, 144, 109},
    { 112, 141, 136}, { 116, 146, 171}, { 113, 143, 197}, { 117, 148, 232},
    { 147, 145,  25}, { 143, 141,  52}, { 147, 146,  87}, { 144, 143, 113},
    { 148, 148, 148}, { 144, 145, 175}, { 149, 150, 209}, { 145, 147, 236},
    { 175, 143,  29}, { 179, 148,  64}, { 175, 145,  91}, { 180, 150, 126},
    { 176, 147, 152}, { 181, 152, 187}, { 177, 149, 213}, { 181, 154, 248},
    { 203, 142,  34}, { 207, 147,  68}, { 203, 144,  95}, { 208, 149, 130},
    { 204, 146, 156}, { 209, 151, 191}, { 205, 148, 218}, { 209, 153, 252},
    { 239, 150,  46}, { 235, 146,  72}, { 240, 151, 107}, { 236, 148, 134},
    { 240, 153, 169}, { 237, 150, 195}, { 241, 155, 230}, { 237, 152, 255},
    {  27, 169,   0}, {  31, 174,  30}, {  28, 171,  56}, {  32, 176,  91},
    {  28, 173, 118}, {  33, 178, 152}, {  29, 175, 179}, {  25, 171, 205},
    {  55, 168,   0}, {  59, 173,  34}, {  56, 170,  60}, {  60, 175,  95},
    {  56, 172, 122}, {  61, 177, 156}, {  57, 174, 183}, {  61, 179, 218},
    {  91, 176,  11}, {  87, 172,  38}, {  92, 177,  73}, {  88, 174,  99},
    {  93, 179, 134}, {  89, 176, 160}, {  93, 181, 195}, {  89, 178, 222},
    { 119, 175,  15}, { 124, 180,  50}, { 120, 176,  77}, { 124, 181, 111},
    { 121, 178, 138}, { 117, 175, 165}, { 121, 180, 199}, { 117, 177, 226},
    { 147, 173,  19}, { 152, 178,  54}, { 148, 175,  81}, { 152, 180, 116},
    { 149, 177, 142}, { 153, 182, 177}, { 149, 179, 203}, { 154, 184, 238},
    { 183, 181,  32}, { 180, 177,  58}, { 184, 182,  93}, { 180, 179, 120},
    { 185, 184, 154}, { 181, 181, 181}, { 185, 186, 216}, { 182, 183, 242},
    { 211, 180,  36}, { 216, 185,  71}, { 212, 181,  97}, { 217, 186, 132},
    { 213, 183, 158}, { 209, 180, 185}, { 213, 185, 220}, { 210, 182, 246},
    { 239, 179,  40}, { 244, 184,  75}, { 240, 180, 101}, { 245, 185, 136},
    { 241, 182, 163}, { 245, 187, 197}, { 241, 184, 224}, { 246, 189, 255},
    {  36, 207,   0}, {  32, 203,  24}, {  36, 208,  58}, {  33, 205,  85},
    {  37, 210, 120}, {  33, 207, 146}, {  38, 212, 181}, {  34, 209, 208},
    {  64, 206,   1}, {  60, 202,  28}, {  64, 207,  63}, {  61, 204,  89},
    {  65, 209, 124}, {  61, 206, 150}, {  66, 211, 185}, {  62, 208, 212},
    {  92, 205,   5}, {  96, 210,  40}, {  92, 206,  67}, {  97, 211, 101},
    {  93, 208, 128}, {  97, 213, 163}, {  94, 210, 189}, {  98, 215, 224},
    { 128, 212,  18}, { 124, 208,  44}, { 129, 213,  79}, { 125, 210, 105},
    { 129, 215, 140}, { 125, 212, 167}, { 130, 217, 202}, { 126, 214, 228},
    { 156, 211,  22}, { 152, 207,  48}, { 157, 212,  83}, { 153, 209, 110},
    { 157, 214, 144}, { 153, 211, 171}, { 158, 216, 206}, { 154, 213, 232},
    { 184, 210,  26}, { 188, 215,  61}, { 185, 211,  87}, { 189, 216, 122},
    { 185, 213, 148}, { 190, 218, 183}, { 186, 215, 210}, { 190, 220, 245},
    { 220, 217,  38}, { 216, 214,  65}, { 221, 219,  99}, { 217, 215, 126},
    { 221, 220, 161}, { 218, 217, 187}, { 222, 222, 222}, { 218, 219, 249},
    { 248, 216,  42}, { 244, 213,  69}, { 249, 218, 103}, { 245, 214, 130},
    { 249, 219, 165}, { 246, 216, 191}, { 250, 221, 226}, { 246, 218, 253},
    {  36, 236,   0}, {  41, 241,  26}, {  37, 237,  52}, {  41, 242,  87},
    {  37, 239, 114}, {  42, 244, 149}, {  38, 241, 175}, {  43, 246, 210},
    {  72, 243,   3}, {  69, 240,  30}, {  73, 245,  65}, {  69, 241,  91},
    {  74, 246, 126}, {  70, 243, 153}, {  74, 248, 187}, {  71, 245, 214},
    { 100, 242,   8}, {  97, 238,  34}, { 101, 243,  69}, {  97, 240,  95},
    { 102, 245, 130}, {  98, 242, 157}, { 102, 247, 192}, {  99, 244, 218},
    { 128, 241,  12}, { 133, 246,  46}, { 129, 242,  73}, { 133, 247, 108},
    { 130, 244, 134}, { 134, 249, 169}, { 130, 246, 196}, { 135, 251, 230},
    { 165, 248,  24}, { 161, 245,  50}, { 165, 250,  85}, { 161, 246, 112},
    { 166, 251, 147}, { 162, 248, 173}, { 167, 253, 208}, { 163, 250, 235},
    { 193, 247,  28}, { 189, 244,  55}, { 193, 249,  89}, { 189, 245, 116},
    { 194, 250, 151}, { 190, 247, 177}, { 195, 252, 212}, { 191, 249, 239},
    { 221, 246,  32}, { 225, 251,  67}, { 221, 248,  93}, { 226, 253, 128},
    { 222, 249, 155}, { 226, 254, 190}, { 223, 251, 216}, { 227, 255, 251},
    { 255, 253,  44}, { 253, 250,  71}, { 255, 255, 106}, { 254, 251, 132},
    { 255, 255, 167}, { 254, 253, 194}, { 255, 255, 228}, { 255, 255, 255}
};

#include "huc6260_inline.h"

#endif /* HUC6260_H */